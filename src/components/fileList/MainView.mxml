<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:tabBar="components.tabbar.*" xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:iconsbar="components.iconsBar.*"
          creationComplete="creationCompleteHandler(event)"
        >
    <fx:Script><![CDATA[
        import core.ExcludedFiles;
        import core.FileMetaDataBase;
        import core.LocationDataBase;

        import model.MovieData;

        import movieServices.OmdbApi;

        import mx.events.FileEvent;
        import mx.events.FlexEvent;

        import spark.events.IndexChangeEvent;

        import utils.IconClasses;

        [Bindable]
        public var currentInfo:MovieData = new MovieData();

        public var fileMetaDB:FileMetaDataBase = IWatchSeriez.CONTEXT.fileMetaDB;
        [Bindable]
        public var locationsDB:LocationDataBase = IWatchSeriez.CONTEXT.locationsDB;

        public var tempDirForHome:File = File.createTempDirectory();

        private var isCreated:Boolean;

        private function creationCompleteHandler(event:FlexEvent):void {
            tabBar.setSelectedToLast();
            navigateTo(tabBar.selectedItem);
            isCreated = true;
        }

        public function openFile(file:File):void {
            file.openWithDefaultApplication();
            IWatchSeriez.CONTEXT.fileMetaDB.getMeta(file.nativePath).icon = IconClasses.questionIconName;
            refreshFileList();
        }

        private function fileList_fileChooseHandler(event:FileEvent):void {
            openFile(event.file);
        }

        private function tabBar1_changeHandler(event:IndexChangeEvent):void {
            fileList.directory = new File(tabBar.selectedItem);
        }

        public function setIconsForSelected(iconString:String):void {
            for each (var file:File in fileList.selectedItems) {
                fileMetaDB.getMeta(file.nativePath).icon = iconString;
            }
            refreshFileList();
            if (fileList.dataProvider.length == 2) {
                fileMetaDB.getMeta(file.parent.nativePath).icon = iconString;
            }
            IWatchSeriez.CONTEXT.fileMetaDB.save();
        }

        public function refreshFileList():void {
            fileList.refresh();
            handleFolderChange();
        }

        private function handleFolderChanging():void {
            if (fileList.selectedPath == tempDirForHome.nativePath) {
                fileList.navigateUp();
            }
        }

        private function getInfo():void {
            var parts:Array = output.text.split(/\\/);
            var query:String = parts.pop();
            query = query.replace(/\.|\(|\)|\-/gi, " "); //replace (.) to spaces
            //query = query.replace(/\-/gi, " "); //replace (-) to spaces
            var find:int = query.search(/S[0-9][0-9]/gi);
            query = find > 10 ? query.slice(0, find) : query; //slice after season
            find = query.search(/(19|20)\d{2}/gi);
            query = find > 4 ? query.slice(0, find) : query; //slice after year 1900-2099
            query = query.slice(0, 30);
            trace("MainView.getInfo", query);
            currentInfo = new MovieData();
            OmdbApi.getInfo(query, currentInfo);

        }

        private function handleFolderChange():void {
            output.text = fileList.directory.nativePath;
            if (tabBar.selectedIndex != -1 && isCreated) {
                locationsDB.tabs.setItemAt(output.text, tabBar.selectedIndex);
            }

            addUpFolder();

            removeGivenFileTypes();

            setSelectedToPreviousFolder();

            getInfo();
        }

        private function setSelectedToPreviousFolder():void {
            var history:Array = fileList.backHistory;
            if (history.length < 1) return;
            var prevFile:File = history[0];
            if (prevFile.parent.nativePath == fileList.directory.nativePath) {
                fileList.selectedItem = prevFile;
                fileList.scrollToIndex(fileList.selectedIndex);
            }
        }

        private function removeGivenFileTypes():void {
            var toRemove:Vector.<File> = new Vector.<File>();
            var file:File;
            for each (file in fileList.dataProvider) {
                if (file && (ExcludedFiles.isExcludedType(file.type) || ExcludedFiles.isExcludedName(file.name))) {
                    toRemove.push(file);
                }
            }
            for each (file in toRemove) {
                fileList.dataProvider.removeItemAt(fileList.dataProvider.getItemIndex(file));
            }
        }

        private function addUpFolder():void {
            var upFolder:UpFolder = new UpFolder();
            if (fileList.directory.parent) {
                upFolder.nativePath = fileList.directory.parent.nativePath;
            } else {
                upFolder.nativePath = tempDirForHome.nativePath;
            }
            fileList.dataProvider.addItemAt(upFolder, 0);
        }

        private function keyDown(event:KeyboardEvent):void {
            switch (event.keyCode) {
                case Keyboard.H :
                    setIconsForSelected(IconClasses.halfIconName);
                    break;
                case Keyboard.W :
                    setIconsForSelected(IconClasses.watchedIconName);
                    break;
                case Keyboard.X :
                    setIconsForSelected(IconClasses.wontIconName);
                    break;
                case Keyboard.N :
                    setIconsForSelected(IconClasses.watchedIconName);
                    fileList.selectedIndex++;
                    openFile(fileList.selectedItem as File);
                    break;
                case Keyboard.A :
                    selectAll();
                    break;
            }
        }

        public function selectAll():void {
            var indices:Array = [];

            for (var i:int = 1; i < fileList.dataProvider.length; i++) {
                indices.push(i);
            }

            fileList.selectedIndices = indices;
        }

        public function navigateTo(url:String):void {
            var file:File = new File(url);
            if (file.exists) {
                fileList.directory = file;
            }
            handleFolderChange();
        }

        private function output_enterHandler(event:FlexEvent):void {
            navigateTo(output.text);
        }
        ]]></fx:Script>
    <s:HGroup width="100%">
        <s:Button label="Up" click="fileList.navigateUp(); handleFolderChange();"
                  enabled="{ fileList.canNavigateUp }"/>
        <mx:FileSystemHistoryButton label="Back" dataProvider="{fileList.backHistory}"
                                    enabled="{fileList.canNavigateBack}"
                                    click="fileList.navigateBack();"
                                    itemClick="fileList.navigateBack(event.index);"/>
        <mx:FileSystemHistoryButton label="Forward" dataProvider="{fileList.forwardHistory}"
                                    enabled="{fileList.canNavigateForward}"
                                    click="fileList.navigateForward();"
                                    itemClick="fileList.navigateForward(event.index);"/>
        <s:TextInput id="output" width="100%" enter="output_enterHandler(event)"/>
    </s:HGroup>
    <tabBar:TabBar id="tabBar"
                   left="8" right="8" y="2"
                   data="@{ locationsDB.tabs }"
                   change="tabBar1_changeHandler(event)"/>
    <mx:FileSystemList width="100%" height="100%"
                       id="fileList"
                       fileChoose="fileList_fileChooseHandler(event);"
                       directoryChange="handleFolderChange();"
                       directoryChanging="handleFolderChanging();"
                       itemRenderer="components.fileList.FileSystemListItemRenderer"
                       allowMultipleSelection="true"
                       keyDown="keyDown(event);"
            />
    <iconsbar:IconsBar mainView="{this}"/>
</s:VGroup>
